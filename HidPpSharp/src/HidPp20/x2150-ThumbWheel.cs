using HidPpSharp.HidPp20.Attributes;

namespace HidPpSharp.HidPp20;

// TODO Events

/// <summary>
/// A thumb wheel generates natively HID reports that are usually horizontal scroll events.
/// This feature gives the possibility to divert these reports (that is to send them in HID++ format
/// instead) or to invert the rotation direction.
/// Additional info is available in the diverted reports, depending of the capabilities of the device, as
/// proxy (proximity) / touch detection, single tap gesture, etc
/// </summary>
[Feature(FeatureId.ThumbWheel)]
public class ThumbWheel : Feature {
    [Flags]
    public enum Capabilities {
        /// <summary>
        /// Time stamp capability - Elapsed time since last report, the unit being time_unit
        /// </summary>
        TimeStamp = 0x0001,

        /// <summary>
        /// Touch capability - Thumb wheels are often coupled with touch or proxy sensors, helpful for some gestures
        /// </summary>
        Touch = 0x0002,

        /// <summary>
        /// Proxy capability
        /// </summary>
        Proxy = 0x0004,

        /// <summary>
        /// Single tap gesture capability
        /// </summary>
        SingleTap = 0x0008,

        /// <summary>
        /// Is set positive when moving to the right or front of the device
        /// </summary>
        DefaultDirection = 0x0100
    }

    public enum Reports : byte {
        /// <summary>
        /// The rotation direction is inverted (relatively to default direction)
        /// </summary>
        Inverted = 0x01,

        /// <summary>
        /// User is touching the thumb wheel
        /// </summary>
        TouchWheel = 0x02,

        /// <summary>
        /// User is close to the thumb wheel
        /// </summary>
        CloseToWheel = 0x04
    }

    public const int FuncGetThumbWheelInfo      = 0x00;
    public const int FuncGetThumbWheelStatus    = 0x01;
    public const int FuncSetThumbWheelReporting = 0x02;

    public ThumbWheel(HidPp20Features features) : base(features, FeatureId.ThumbWheel) { }

    /// <summary>
    /// The function returns the thumb wheel status
    /// </summary>
    /// <returns></returns>
    /// <exception cref="FeatureException"></exception>
    public WheelInfo GetThumbWheelInfo() {
        var response = CallFunction(FuncGetThumbWheelInfo);
        if (response.IsSuccess) {
            return new WheelInfo {
                NativeResolution   = response.ReadUInt16(0),
                DivertedResolution = response.ReadUInt16(2),
                Capabilities       = (Capabilities)response.ReadUInt16(4),
                Timestamp          = response.ReadUInt16(6)
            };
        }

        throw new FeatureException(FeatureId, response);
    }

    /// <summary>
    /// The function returns the thumb wheel status
    /// </summary>
    /// <returns>
    /// diverted = if true diverted mode (HID++ only) is used, otherwise native mode (HID)
    /// reports = what is reported
    /// </returns>
    /// <exception cref="FeatureException"></exception>
    public (bool diverted, Reports reports) GetThumbWheelStatus() {
        var response = CallFunction(FuncGetThumbWheelStatus);
        if (response.IsSuccess) {
            return new ValueTuple<bool, Reports>(response[0] == 1, (Reports)response[1]);
        }

        throw new FeatureException(FeatureId, response);
    }

    /// <summary>
    /// Set the reporting mode
    /// </summary>
    /// <param name="diverted">In Diverted mode, ThumbWheelEvent is sent in HID++, otherwise native </param>
    /// <param name="invertDirection">If true invert the rotation direction (relatively to default_dir). This setting
    /// applies in both native and diverted modes</param>
    /// <exception cref="FeatureException"></exception>
    public void SetThumbWheelReporting(bool diverted, bool invertDirection) {
        var response = CallFunction(FuncSetThumbWheelReporting,
            diverted ? (byte)0x01 : (byte)0x00,
            invertDirection ? (byte)0x01 : (byte)0x00);

        if (!response.IsSuccess) {
            throw new FeatureException(FeatureId, response);
        }
    }

    public struct WheelInfo {
        /// <summary>
        /// The number of ratchets generated by revolution when in native (HID) mode
        /// </summary>
        public int NativeResolution;

        /// <summary>
        /// The number of rotation increments generated by revolution when in diverted (HID++) mode
        /// </summary>
        public int DivertedResolution;

        /// <summary>
        /// If time stamp is supported, it gives the unit in us (micro second); otherwise, set to 0
        /// </summary>
        public int Timestamp;

        public Capabilities Capabilities;
    }
}